{{/* 
  Modern Lobby Page - VentoJS + Alpine.js Integration
  Based on Frontend Implementation Strategy patterns
*/}}

{{ import { button, iconButton } from "../components/ui/button.vto" }}
{{ import { participantGrid, participantCount } from "../components/workshop/participant-sidebar.vto" }}
{{ import { notificationContainer } from "../components/ui/notification.vto" }}

{{ layout "layouts/base.vto" {
  pageTitle: workshop.title + " - " + group.title + " - Vorraum",
  pageClass: "lobby-page",
  showHeader: false,
  additionalCSS: "lobby",
  additionalJS: "lobby",
  alpineData: `lobbyApp({
    groupId: '${group.id}',
    workshopId: '${workshop.id}',
    participants: ${participants | json},
    groupUrls: ${urls | json}
  })`
} }}

<div class="lobby-container container">
  
  {{/* Hero Section */}}
  <header class="lobby-hero">
    <div class="hero-content">
      <div class="workshop-breadcrumb">
        <span class="workshop-name">{{ workshop.title }}</span>
        <span class="breadcrumb-separator">‚Üí</span>
        <span class="current-location">Vorraum</span>
      </div>
      
      <h1 class="group-title text-balance">{{ group.title }}</h1>
      
      {{ if group.description }}
        <p class="group-description text-pretty">{{ group.description }}</p>
      {{ /if }}
      
      <div class="hero-status">
        <div class="status-badge status-badge--{{ group.status }}">
          <span class="status-indicator"></span>
          <span class="status-text">{{ group.status | activityStatus }}</span>
        </div>
        
        <div class="online-counter" x-data="{ count: 0 }">
          <span class="counter-icon" aria-hidden="true">üë•</span>
          <span class="counter-text" x-text="onlineCount + ' online'"></span>
        </div>
      </div>
    </div>
  </header>

  {{/* Loading State */}}
  <div x-show="isLoading" 
       class="lobby-state lobby-state--loading"
       x-transition>
    <div class="state-content">
      <div class="state-icon loading">
        <div class="loading-spinner"></div>
      </div>
      <div class="state-text">
        <h3>Verbinde mit der Gruppe...</h3>
        <p>Lade Teilnehmerdaten und pr√ºfe Verf√ºgbarkeit</p>
      </div>
    </div>
  </div>

  {{/* Error State */}}
  <div x-show="hasError" 
       class="lobby-state lobby-state--error"
       x-transition>
    <div class="state-content">
      <div class="state-icon">‚ö†Ô∏è</div>
      <div class="state-text">
        <h3>Verbindungsproblem</h3>
        <p x-text="errorMessage"></p>
        <div class="state-actions">
          {{ button('Erneut versuchen', {
            variant: 'primary',
            onClick: 'retryConnection()',
            alpine: '@click="retryConnection()"'
          }) }}
        </div>
      </div>
    </div>
  </div>

  {{/* Multi-Device Warning */}}
  <div x-show="showMultiDeviceModal" 
       class="lobby-state lobby-state--warning"
       x-transition>
    <div class="state-content">
      <div class="state-icon">üì±</div>
      <div class="state-text">
        <h3>Bereits auf anderem Ger√§t angemeldet</h3>
        <p>Sie sind bereits in dieser Gruppe online. M√∂chten Sie hier fortfahren?</p>
        <div class="state-actions">
          {{ button('Hier fortfahren', {
            variant: 'primary',
            onClick: 'continueOnThisDevice()',
            alpine: '@click="continueOnThisDevice()"'
          }) }}
          {{ button('Abbrechen', {
            variant: 'ghost',
            onClick: 'cancelMultiDevice()',
            alpine: '@click="cancelMultiDevice()"'
          }) }}
        </div>
      </div>
    </div>
  </div>

  {{/* Main Lobby Interface */}}
  <div x-show="!isLoading && !hasError" 
       class="lobby-main"
       x-transition:enter.duration.300ms>

    {{/* Group Information Card */}}
    <div class="group-info-card">
      <div class="card-header">
        <h2>Gruppenstatus</h2>
        <button class="info-refresh" 
                @click="refreshStatus()"
                :disabled="isRefreshing"
                :aria-label="isRefreshing ? 'Aktualisiere...' : 'Status aktualisieren'">
          <span class="refresh-icon" :class="{ 'spinning': isRefreshing }">üîÑ</span>
        </button>
      </div>
      
      <div class="status-grid">
        <div class="status-item">
          <span class="item-label">Teilnehmer</span>
          <span class="item-value">{{ participants.length | participantCount }}</span>
        </div>
        
        <div class="status-item">
          <span class="item-label">Workshop</span>
          <span class="item-value">{{ workshop.title }}</span>
        </div>
        
        <div class="status-item">
          <span class="item-label">Online</span>
          <span class="item-value" x-text="onlineCount + ' Personen'"></span>
        </div>
        
        <div class="status-item">
          <span class="item-label">Status</span>
          <span class="item-value">
            <span class="status-badge status-badge--{{ group.status }}">
              {{ group.status | activityStatus }}
            </span>
          </span>
        </div>
      </div>
    </div>

    {{/* Participant Selection Section */}}
    <section class="participant-selection" aria-labelledby="participants-heading">
      <header class="section-header">
        <h2 id="participants-heading">Wer sind Sie?</h2>
        <p class="section-subtitle">W√§hlen Sie Ihren Namen aus der Liste, um der Gruppe beizutreten</p>
      </header>

      <div class="participants-grid auto-grid">
        {{ for participant of participants }}
          <button class="participant-card"
                  :class="{ 
                    'participant-card--online': isParticipantOnline('{{ participant.id }}'),
                    'participant-card--current': selectedParticipant?.id === '{{ participant.id }}'
                  }"
                  @click="selectParticipant('{{ participant.id }}', '{{ participant.display_name | escape }}', '{{ participant.role }}')"
                  :disabled="isParticipantOnline('{{ participant.id }}')"
                  :aria-pressed="selectedParticipant?.id === '{{ participant.id }}'"
                  type="button">
            
            <div class="participant-avatar">
              <span class="avatar-initials">{{ participant.display_name | initials }}</span>
              <span class="avatar-status" 
                    :class="isParticipantOnline('{{ participant.id }}') ? 'online' : 'offline'"></span>
            </div>
            
            <div class="participant-info">
              <h3 class="participant-name">{{ participant.display_name }}</h3>
              <p class="participant-role">{{ participant.role | roleTranslation }}</p>
            </div>
            
            <div class="participant-status">
              <span x-show="isParticipantOnline('{{ participant.id }}')" 
                    class="status-indicator status-indicator--online">
                Online
              </span>
              <span x-show="!isParticipantOnline('{{ participant.id }}')" 
                    class="status-indicator status-indicator--available">
                Verf√ºgbar
              </span>
            </div>
          </button>
        {{ /for }}
      </div>

      {{/* Join Button */}}
      <div class="join-section" x-show="selectedParticipant">
        <div class="join-card">
          <div class="join-info">
            <h3>Bereit zum Beitreten?</h3>
            <p>Als <strong x-text="selectedParticipant?.displayName"></strong> anmelden</p>
          </div>
          
          <div class="join-actions">
            {{ button('Gruppe beitreten', {
              variant: 'primary',
              size: 'lg',
              onClick: 'joinGroup()',
              alpine: '@click="joinGroup()" :disabled="isJoining"'
            }) }}
            
            {{ button('Auswahl √§ndern', {
              variant: 'ghost',
              onClick: 'clearSelection()',
              alpine: '@click="clearSelection()"'
            }) }}
          </div>
        </div>
      </div>
    </section>

    {{/* Help & Instructions */}}
    <aside class="help-section" aria-labelledby="help-heading">
      <div class="help-card">
        <h3 id="help-heading">Wie funktioniert's?</h3>
        
        <div class="help-steps">
          <div class="help-step">
            <div class="step-number">1</div>
            <div class="step-content">
              <h4>Name ausw√§hlen</h4>
              <p>Klicken Sie auf Ihren Namen in der Teilnehmerliste</p>
            </div>
          </div>
          
          <div class="help-step">
            <div class="step-number">2</div>
            <div class="step-content">
              <h4>Gruppe beitreten</h4>
              <p>Best√§tigen Sie Ihre Auswahl mit "Gruppe beitreten"</p>
            </div>
          </div>
          
          <div class="help-step">
            <div class="step-number">3</div>
            <div class="step-content">
              <h4>Zusammen schreiben</h4>
              <p>Arbeiten Sie gemeinsam an kreativen Schreib√ºbungen</p>
            </div>
          </div>
        </div>

        {{ if urls.short_url }}
          <div class="share-section">
            <h4>Diese Lobby teilen</h4>
            <div class="share-url-container">
              <code class="share-url" x-data="{ copied: false }">
                <span>{{ urls.short_url }}</span>
                <button class="copy-button" 
                        @click="copyToClipboard('{{ urls.short_url }}'); copied = true; setTimeout(() => copied = false, 2000)"
                        :aria-label="copied ? 'Kopiert!' : 'URL kopieren'">
                  <span x-show="!copied">üìã</span>
                  <span x-show="copied">‚úì</span>
                </button>
              </code>
            </div>
          </div>
        {{ /if }}
      </div>
    </aside>
  </div>
</div>

{{/* Notification System */}}
{{ notificationContainer({ position: 'bottom-right' }) }}

{{/* Alpine.js Lobby Component */}}
<script>
Alpine.data('lobbyApp', (config) => ({
  // Configuration
  groupId: config.groupId,
  workshopId: config.workshopId,
  participants: config.participants,
  groupUrls: config.groupUrls,
  
  // State
  isLoading: true,
  hasError: false,
  errorMessage: '',
  isRefreshing: false,
  isJoining: false,
  
  // Multi-device handling
  showMultiDeviceModal: false,
  pendingParticipant: null,
  
  // Selection
  selectedParticipant: null,
  
  // Real-time data
  onlineParticipants: [],
  onlineCount: 0,
  eventSource: null,
  
  init() {
    this.initializeLobby();
  },
  
  async initializeLobby() {
    try {
      // Check for existing session
      const existingSession = this.getStoredSession();
      if (existingSession && await this.validateSession(existingSession)) {
        // Redirect to group room
        window.location.href = this.groupUrls.full_semantic_url;
        return;
      }
      
      // Load initial data
      await this.loadOnlineStatus();
      this.setupSSE();
      
      this.isLoading = false;
      
      // Add successful connection notification
      this.$dispatch('notify', {
        message: 'Lobby geladen',
        type: 'success',
        duration: 2000
      });
      
    } catch (error) {
      this.handleError('Fehler beim Laden der Lobby', error);
    }
  },
  
  async loadOnlineStatus() {
    try {
      const response = await this.$ajax(`/api/groups/${this.groupId}/online`);
      this.onlineParticipants = response.participants || [];
      this.onlineCount = response.count || 0;
    } catch (error) {
      console.warn('Failed to load online status:', error);
      // Don't show error for this, just log it
    }
  },
  
  setupSSE() {
    if (this.eventSource) {
      this.eventSource.close();
    }
    
    this.eventSource = new EventSource(`/api/sse/lobby/${this.groupId}`);
    
    this.eventSource.addEventListener('online:status', (event) => {
      const data = JSON.parse(event.data);
      this.onlineParticipants = data.participants || [];
      this.onlineCount = data.count || 0;
    });
    
    this.eventSource.addEventListener('participant:joined', (event) => {
      const participant = JSON.parse(event.data);
      this.$dispatch('notify', {
        message: `${participant.display_name} ist der Gruppe beigetreten`,
        type: 'info',
        duration: 3000
      });
    });
    
    this.eventSource.onerror = () => {
      console.warn('SSE connection lost in lobby');
      // Try to reconnect after a delay
      setTimeout(() => this.setupSSE(), 5000);
    };
    
    // Cleanup on page unload
    window.addEventListener('beforeunload', () => {
      if (this.eventSource) {
        this.eventSource.close();
      }
    });
  },
  
  isParticipantOnline(participantId) {
    return this.onlineParticipants.includes(participantId);
  },
  
  selectParticipant(participantId, displayName, role) {
    if (this.isParticipantOnline(participantId)) {
      // Show multi-device warning
      this.pendingParticipant = { participantId, displayName, role };
      this.showMultiDeviceModal = true;
      return;
    }
    
    this.selectedParticipant = {
      id: participantId,
      displayName,
      role
    };
  },
  
  clearSelection() {
    this.selectedParticipant = null;
  },
  
  async joinGroup() {
    if (!this.selectedParticipant) return;
    
    this.isJoining = true;
    
    try {
      await this.authenticateParticipant(
        this.selectedParticipant.id,
        this.selectedParticipant.displayName,
        this.selectedParticipant.role
      );
    } finally {
      this.isJoining = false;
    }
  },
  
  async authenticateParticipant(participantId, displayName, role) {
    try {
      const response = await this.$ajax('/api/auth/login', {
        method: 'POST',
        body: {
          participant_id: participantId,
          workshop_group_id: this.groupId,
          display_name: displayName,
          role: role
        }
      });
      
      if (response.session) {
        this.storeSession(response.session);
        
        this.$dispatch('notify', {
          message: `Willkommen, ${displayName}!`,
          type: 'success',
          duration: 2000
        });
        
        // Small delay to show the notification
        setTimeout(() => {
          window.location.href = this.groupUrls.full_semantic_url;
        }, 1000);
      }
    } catch (error) {
      this.handleError('Anmeldung fehlgeschlagen', error);
    }
  },
  
  async continueOnThisDevice() {
    if (this.pendingParticipant) {
      await this.authenticateParticipant(
        this.pendingParticipant.participantId,
        this.pendingParticipant.displayName,
        this.pendingParticipant.role
      );
    }
    this.cancelMultiDevice();
  },
  
  cancelMultiDevice() {
    this.showMultiDeviceModal = false;
    this.pendingParticipant = null;
  },
  
  async refreshStatus() {
    this.isRefreshing = true;
    
    try {
      await this.loadOnlineStatus();
      
      this.$dispatch('notify', {
        message: 'Status aktualisiert',
        type: 'success',
        duration: 1500
      });
    } catch (error) {
      this.$dispatch('notify', {
        message: 'Fehler beim Aktualisieren',
        type: 'error',
        duration: 3000
      });
    } finally {
      this.isRefreshing = false;
    }
  },
  
  async retryConnection() {
    this.hasError = false;
    this.isLoading = true;
    await this.initializeLobby();
  },
  
  // Utility methods
  getStoredSession() {
    const cookie = document.cookie
      .split(';')
      .find(c => c.trim().startsWith('schreibmaschine_session='));
    return cookie ? cookie.split('=')[1] : null;
  },
  
  storeSession(sessionToken) {
    document.cookie = `schreibmaschine_session=${sessionToken}; path=/; max-age=86400; secure; samesite=strict`;
  },
  
  async validateSession(sessionToken) {
    try {
      const response = await this.$ajax('/api/auth/validate', {
        headers: { 'Authorization': `Bearer ${sessionToken}` }
      });
      return response.valid === true;
    } catch {
      return false;
    }
  },
  
  async copyToClipboard(text) {
    try {
      await navigator.clipboard.writeText(text);
      this.$dispatch('notify', {
        message: 'URL kopiert',
        type: 'success',
        duration: 2000
      });
    } catch (error) {
      console.warn('Failed to copy to clipboard:', error);
      // Fallback - select the text
      const textArea = document.createElement('textarea');
      textArea.value = text;
      document.body.appendChild(textArea);
      textArea.select();
      document.execCommand('copy');
      document.body.removeChild(textArea);
      
      this.$dispatch('notify', {
        message: 'URL kopiert',
        type: 'success',
        duration: 2000
      });
    }
  },
  
  handleError(message, error) {
    this.hasError = true;
    this.errorMessage = message + (error ? ': ' + error.message : '');
    this.isLoading = false;
    
    console.error('Lobby error:', error);
    
    this.$dispatch('notify', {
      message: this.errorMessage,
      type: 'error',
      duration: 0 // Don't auto-dismiss error notifications
    });
  }
}));
</script>

{{ /layout }}