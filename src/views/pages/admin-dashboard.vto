{{ layout "layouts/base.vto" }}

<!-- Admin Dashboard -->
<div class="admin-container" x-data="adminDashboard()" x-init="init()">
  
  <!-- Admin Header -->
  <div class="admin-header">
    <div>
      <h1>Admin Dashboard</h1>
      <p class="subtitle">Schreibmaschine Verwaltung</p>
    </div>
    <div>
      <button @click="logout()" class="btn-secondary">
        游뛁 Abmelden
      </button>
    </div>
  </div>

  <!-- Navigation -->
  <div class="admin-nav">
    <a href="#dashboard" @click="setActiveTab('dashboard')" 
       :class="activeTab === 'dashboard' ? 'admin-nav-link active' : 'admin-nav-link'">
      游늵 Dashboard
    </a>
    <a href="#workshops" @click="setActiveTab('workshops')" 
       :class="activeTab === 'workshops' ? 'admin-nav-link active' : 'admin-nav-link'">
      游닄 Workshops
    </a>
    <a href="#participants" @click="setActiveTab('participants')" 
       :class="activeTab === 'participants' ? 'admin-nav-link active' : 'admin-nav-link'">
      游논 Teilnehmer
    </a>
    <a href="#online" @click="setActiveTab('online')" 
       :class="activeTab === 'online' ? 'admin-nav-link active' : 'admin-nav-link'">
      游릭 Online Status
    </a>
  </div>

  <!-- Dashboard Tab -->
  <div x-show="activeTab === 'dashboard'" x-transition>
    
    <!-- Stats Cards -->
    <div class="admin-stats">
      <div class="stat-card">
        <div class="stat-number" x-text="stats.totalWorkshops">{{ totalWorkshops }}</div>
        <div class="stat-label">Workshops</div>
      </div>
      <div class="stat-card">
        <div class="stat-number" x-text="stats.totalParticipants">{{ totalParticipants }}</div>
        <div class="stat-label">Teilnehmer</div>
      </div>
      <div class="stat-card">
        <div class="stat-number" x-text="stats.onlineParticipants">{{ onlineParticipants }}</div>
        <div class="stat-label">Online</div>
      </div>
      <div class="stat-card">
        <div class="stat-number" x-text="stats.activeWorkshops">{{ workshops |> filter(w => w.status === 'active') |> length }}</div>
        <div class="stat-label">Aktive Workshops</div>
      </div>
    </div>

    <!-- Recent Activity -->
    <div class="admin-grid">
      <div class="admin-card">
        <h3>游닄 Aktuelle Workshops</h3>
        {{ if workshops.length > 0 }}
        <ul class="workshop-list">
          {{ for workshop of workshops.slice(0, 5) }}
          <li>
            <strong>{{ workshop.name }}</strong>
            <span class="workshop-status status-{{ workshop.status }}">{{ workshop.status |> activityStatus }}</span>
            <div class="workshop-meta">
              Erstellt: {{ workshop.created_at |> formatDate }}
            </div>
          </li>
          {{ /for }}
        </ul>
        {{ else }}
        <p class="empty-state">Noch keine Workshops erstellt</p>
        {{ /if }}
      </div>

      <div class="admin-card">
        <h3>游논 Letzte Teilnehmer</h3>
        {{ if recentParticipants.length > 0 }}
        <ul class="participant-list">
          {{ for participant of recentParticipants }}
          <li>
            <div class="participant-info">
              <strong>{{ participant.display_name }}</strong>
              <span class="participant-full-name">{{ participant.full_name }}</span>
            </div>
            <div class="participant-meta">
              Erstellt: {{ participant.created_at |> formatDate }}
            </div>
          </li>
          {{ /for }}
        </ul>
        {{ else }}
        <p class="empty-state">Noch keine Teilnehmer registriert</p>
        {{ /if }}
      </div>
    </div>
  </div>

  <!-- Workshops Tab -->
  <div x-show="activeTab === 'workshops'" x-transition>
    <div class="admin-card">
      <h3>游닄 Workshop-Verwaltung</h3>
      
      <table class="admin-table">
        <thead>
          <tr>
            <th>Name</th>
            <th>Slug</th>
            <th>Status</th>
            <th>Beschreibung</th>
            <th>Aktionen</th>
          </tr>
        </thead>
        <tbody>
          <template x-for="workshop in workshops" :key="workshop.id">
            <tr>
              <td x-text="workshop.name"></td>
              <td><code x-text="workshop.slug"></code></td>
              <td>
                <span :class="workshop.status === 'active' ? 'online-indicator' : 'offline-indicator'"></span>
                <span x-text="workshop.status"></span>
              </td>
              <td x-text="workshop.description"></td>
              <td>
                <button class="btn-secondary" @click="viewWorkshop(workshop.id)">
                  游늯 Details
                </button>
              </td>
            </tr>
          </template>
        </tbody>
      </table>
    </div>
  </div>

  <!-- Participants Tab -->
  <div x-show="activeTab === 'participants'" x-transition>
    <div class="admin-card">
      <h3>游논 Teilnehmer-Verwaltung</h3>
      
      <table class="admin-table">
        <thead>
          <tr>
            <th>Anzeigename</th>
            <th>Vollst칛ndiger Name</th>
            <th>ID</th>
            <th>Aktionen</th>
          </tr>
        </thead>
        <tbody>
          <template x-for="participant in participants" :key="participant.id">
            <tr>
              <td><strong x-text="participant.display_name"></strong></td>
              <td x-text="participant.full_name"></td>
              <td><code x-text="participant.id.slice(0, 8)"></code></td>
              <td>
                <button class="btn-secondary" @click="viewParticipant(participant.id)">
                  游늯 Details
                </button>
              </td>
            </tr>
          </template>
        </tbody>
      </table>
    </div>
  </div>

  <!-- Online Status Tab -->
  <div x-show="activeTab === 'online'" x-transition>
    <div class="admin-card">
      <h3>游릭 Online Status (aktualisiert alle 30s)</h3>
      
      <div x-show="onlineStats.length === 0" class="empty-state">
        <p>Momentan sind keine Teilnehmer online</p>
      </div>

      <div x-show="onlineStats.length > 0">
        <table class="admin-table">
          <thead>
            <tr>
              <th>Teilnehmer</th>
              <th>Gruppe</th>
              <th>Online seit</th>
              <th>Letzte Aktivit칛t</th>
              <th>Status</th>
            </tr>
          </thead>
          <tbody>
            <template x-for="stat in onlineStats" :key="stat.participantId">
              <tr>
                <td>
                  <div class="participant-info">
                    <span class="online-indicator"></span>
                    <strong x-text="stat.participantName"></strong>
                  </div>
                </td>
                <td x-text="stat.groupName"></td>
                <td x-text="formatRelativeTime(stat.loginTime)"></td>
                <td x-text="formatRelativeTime(stat.lastActivity)"></td>
                <td>
                  <span class="status-active">Online</span>
                </td>
              </tr>
            </template>
          </tbody>
        </table>
      </div>
    </div>
  </div>

</div>

<script>
function adminDashboard() {
  return {
    activeTab: 'dashboard',
    
    // Server-side data
    workshops: {{ workshops |> json }},
    participants: {{ recentParticipants |> json }},
    onlineStats: {{ onlineStats |> json }},
    
    // Dynamic stats (updated via API)
    stats: {
      totalWorkshops: {{ totalWorkshops }},
      totalParticipants: {{ totalParticipants }},
      onlineParticipants: {{ onlineParticipants }},
      activeWorkshops: 0
    },

    init() {
      this.updateStats();
      this.startAutoRefresh();
    },

    setActiveTab(tab) {
      this.activeTab = tab;
      // Update URL hash
      window.location.hash = tab;
    },

    async updateStats() {
      try {
        const response = await fetch('/admin/api/stats', {
          credentials: 'include'
        });
        const data = await response.json();
        this.stats = { ...this.stats, ...data };
      } catch (error) {
        console.error('Failed to update stats:', error);
      }
    },

    async updateOnlineStatus() {
      try {
        const response = await fetch('/admin/api/online', {
          credentials: 'include'
        });
        const data = await response.json();
        this.onlineStats = data.onlineParticipants || [];
      } catch (error) {
        console.error('Failed to update online status:', error);
      }
    },

    startAutoRefresh() {
      // Update online status every 30 seconds
      setInterval(() => {
        this.updateOnlineStatus();
        this.updateStats();
      }, 30000);
    },

    async logout() {
      try {
        const response = await fetch('/admin/logout', {
          method: 'POST',
          credentials: 'include'
        });
        
        if (response.ok) {
          window.location.href = '/admin';
        }
      } catch (error) {
        console.error('Logout failed:', error);
      }
    },

    viewWorkshop(workshopId) {
      console.log('View workshop:', workshopId);
      // TODO: Implement workshop detail view
    },

    viewParticipant(participantId) {
      console.log('View participant:', participantId);
      // TODO: Implement participant detail view
    },

    formatRelativeTime(timestamp) {
      const now = new Date();
      const time = new Date(timestamp);
      const diffMs = now - time;
      const diffMins = Math.floor(diffMs / 60000);
      
      if (diffMins < 1) return 'gerade eben';
      if (diffMins < 60) return `vor ${diffMins} Min`;
      
      const diffHours = Math.floor(diffMins / 60);
      if (diffHours < 24) return `vor ${diffHours}h`;
      
      const diffDays = Math.floor(diffHours / 24);
      return `vor ${diffDays} Tag${diffDays > 1 ? 'en' : ''}`;
    }
  };
}
</script>