{{/* 
  Modal Component - Dialog system with Alpine.js integration
  Based on Caleb Porzio's modal patterns and design system
*/}}

{{ function modal(id, title, content, options = {}) }}
  {{ set size = options.size || 'md' }}
  {{ set className = options.className || '' }}
  {{ set showCloseButton = options.showCloseButton !== false }}
  {{ set closable = options.closable !== false }}
  
  <div x-data="{ open: false }" 
       x-on:open-modal.window="if ($event.detail.id === '{{ id }}') open = true"
       x-on:close-modal.window="if ($event.detail.id === '{{ id }}') open = false"
       class="modal-wrapper">
    
    <div x-show="open" 
         x-cloak
         class="modal-overlay fixed inset-0 z-50 overflow-y-auto"
         x-transition:enter="transition-enter"
         x-transition:enter-start="opacity-0"
         x-transition:enter-end="opacity-100"
         x-transition:leave="transition-leave"
         x-transition:leave-start="opacity-100"
         x-transition:leave-end="opacity-0">
      
      {{/* Backdrop */}}
      <div class="modal-backdrop fixed inset-0 bg-black bg-opacity-50"
           {{ if closable }}@click="open = false"{{ /if }}></div>
      
      {{/* Modal Container */}}
      <div class="modal-container relative flex min-h-screen items-center justify-center p-4">
        
        {{/* Modal Panel */}}
        <div class="modal-panel modal-panel--{{ size }} {{ className }}"
             x-transition:enter="transition-enter"
             x-transition:enter-start="opacity-0 scale-95"
             x-transition:enter-end="opacity-100 scale-100"
             x-transition:leave="transition-leave" 
             x-transition:leave-start="opacity-100 scale-100"
             x-transition:leave-end="opacity-0 scale-95"
             @click.stop
             role="dialog"
             aria-modal="true"
             :aria-labelledby="'{{ id }}-title'">
          
          {{/* Modal Header */}}
          <header class="modal-header">
            <h2 id="{{ id }}-title" class="modal-title">{{ title }}</h2>
            
            {{ if showCloseButton && closable }}
              <button type="button" 
                      class="modal-close"
                      @click="open = false"
                      aria-label="Dialog schließen">
                <span aria-hidden="true">×</span>
              </button>
            {{ /if }}
          </header>
          
          {{/* Modal Body */}}
          <div class="modal-body">
            {{ content }}
          </div>
          
          {{/* Modal Footer (if actions provided) */}}
          {{ if options.actions }}
            <footer class="modal-footer">
              {{ for action of options.actions }}
                <button type="button"
                        class="button {{ action.variant ? `button--${action.variant}` : '' }}"
                        @click="{{ action.onClick || 'open = false' }}">
                  {{ action.label }}
                </button>
              {{ /for }}
            </footer>
          {{ /if }}
        </div>
      </div>
    </div>
  </div>
{{ /function }}

{{ function confirmModal(id, title, message, options = {}) }}
  {{ set confirmText = options.confirmText || 'Bestätigen' }}
  {{ set cancelText = options.cancelText || 'Abbrechen' }}
  {{ set confirmVariant = options.confirmVariant || 'primary' }}
  {{ set onConfirm = options.onConfirm || '' }}
  {{ set onCancel = options.onCancel || '' }}
  
  {{ modal(id, title, message, {
    size: 'sm',
    className: 'modal--confirm',
    actions: [
      {
        label: cancelText,
        variant: 'ghost',
        onClick: `open = false; ${onCancel}`
      },
      {
        label: confirmText,
        variant: confirmVariant,
        onClick: `open = false; ${onConfirm}`
      }
    ]
  }) }}
{{ /function }}

{{ function multiDeviceModal(sessionData) }}
  {{ set title = 'Mehrere Geräte erkannt' }}
  {{ set message = `Sie sind bereits auf einem anderen Gerät angemeldet (${sessionData.deviceType || 'Unbekannt'}). Möchten Sie hier fortfahren?` }}
  
  {{ confirmModal('multi-device-session', title, message, {
    confirmText: 'Hier fortfahren',
    cancelText: 'Abbrechen',
    confirmVariant: 'primary',
    onConfirm: 'takeoverSession()',
    onCancel: 'logout()'
  }) }}
{{ /function }}

{{ function activitySettingsModal(activity) }}
  <div x-data="{
    title: '{{ activity.title | escape }}',
    description: '{{ activity.description | escape }}',
    allowSkip: {{ activity.allowSkip || false }},
    timeLimit: {{ activity.timeLimit || 0 }},
    
    saveSettings() {
      $ajax('/api/activities/{{ activity.id }}/settings', {
        method: 'PUT',
        body: {
          title: this.title,
          description: this.description,
          allowSkip: this.allowSkip,
          timeLimit: this.timeLimit
        }
      }).then(() => {
        $dispatch('close-modal', { id: 'activity-settings' });
        $dispatch('notify', {
          message: 'Activity-Einstellungen gespeichert',
          type: 'success'
        });
      });
    }
  }">
    
    {{ modal('activity-settings', 'Activity-Einstellungen', `
      <form @submit.prevent="saveSettings()" class="space-y-4">
        <div class="form-group">
          <label for="activity-title" class="form-label">Titel</label>
          <input type="text" 
                 id="activity-title"
                 x-model="title" 
                 class="input"
                 required>
        </div>
        
        <div class="form-group">
          <label for="activity-description" class="form-label">Beschreibung</label>
          <textarea id="activity-description"
                    x-model="description" 
                    class="input"
                    rows="3"></textarea>
        </div>
        
        <div class="form-group">
          <label class="form-label flex items-center gap-2">
            <input type="checkbox" 
                   x-model="allowSkip" 
                   class="checkbox">
            <span>Runde überspringen erlauben</span>
          </label>
        </div>
        
        <div class="form-group">
          <label for="time-limit" class="form-label">Zeitlimit (Minuten, 0 = unbegrenzt)</label>
          <input type="number" 
                 id="time-limit"
                 x-model="timeLimit" 
                 class="input"
                 min="0"
                 step="1">
        </div>
      </form>
    `, {
      size: 'md',
      actions: [
        {
          label: 'Abbrechen',
          variant: 'ghost',
          onClick: 'open = false'
        },
        {
          label: 'Speichern',
          variant: 'primary',
          onClick: 'saveSettings()'
        }
      ]
    }) }}
  </div>
{{ /function }}

{{/* Modal trigger helpers */}}
{{ function modalTrigger(modalId, triggerText, options = {}) }}
  {{ set buttonVariant = options.buttonVariant || 'default' }}
  {{ set buttonSize = options.buttonSize || 'md' }}
  {{ set className = options.className || '' }}
  
  <button type="button"
          class="button button--{{ buttonVariant }} button--{{ buttonSize }} {{ className }}"
          @click="$dispatch('open-modal', { id: '{{ modalId }}' })"
          {{ if options.alpine }}{{ options.alpine }}{{ /if }}>
    {{ triggerText }}
  </button>
{{ /function }}

{{/* JavaScript helpers for programmatic modal control */}}
{{ function modalHelperScript() }}
  <script>
    // Global modal helpers
    window.openModal = function(id, data = {}) {
      window.dispatchEvent(new CustomEvent('open-modal', {
        detail: { id, ...data }
      }));
    };
    
    window.closeModal = function(id) {
      window.dispatchEvent(new CustomEvent('close-modal', {
        detail: { id }
      }));
    };
    
    // Keyboard support
    document.addEventListener('keydown', function(event) {
      if (event.key === 'Escape') {
        // Close topmost modal
        const modals = document.querySelectorAll('.modal-overlay[x-show="open"]');
        if (modals.length > 0) {
          const topModal = modals[modals.length - 1];
          const modalData = Alpine.$data(topModal.closest('[x-data]'));
          if (modalData && modalData.open) {
            modalData.open = false;
          }
        }
      }
    });
  </script>
{{ /function }}

{{/* Export functions */}}
{{ export { 
  modal, 
  confirmModal,
  multiDeviceModal,
  activitySettingsModal,
  modalTrigger,
  modalHelperScript
} }}